---
- name: Use local copy of superrepo
  file: path=/opt/stack state=link src=/srv/git/openstack
  when: openstack_source.use_superproject and openstack_source.use_local_superproject

- name: get openstack superrepo
  command: git clone {{ openstack_source.git_mirror }}/openstack
  args:
    chdir: /opt
    creates: /opt/stack/.git
  register: git_result
  until: git_result|success
  retries: 3
  when: openstack_source.use_superproject and not openstack_source.use_local_superproject

- name: Fetch if exists
  command: git fetch origin
  args:
    chdir: /opt/stack
  when: not git_result.changed and openstack_source.git_update

- name: Checkout version
  command: git checkout "{{ openstack_source.project_rev }}"
  args:
    chdir: /opt/stack
  register: git_checkout_result
  changed_when: "'Switched to branch' in git_checkout_result.stdout or 'checking out' in git_checkout_result.stdout"
  when: openstack_source.use_superproject and not openstack_source.use_local_superproject

- name: initialize repo submodules
  command: git submodule init
  args:
    chdir: /opt/stack
  register: superrepo_init
  changed_when: superrepo_init.stdout
  when: openstack_source.use_superproject and not openstack_source.use_local_superproject

- name: fetch all tags
  command: git fetch --tags
  args:
    chdir: /opt/stack
  register: superrepo_tags
  changed_when: superrepo_tags.stdout
  when: openstack_source.use_superproject and not openstack_source.use_local_superproject

- name: get requirements project from superrepo
  command: git submodule update --recursive requirements
  args:
    chdir: /opt/stack
  register: superrepo_update
  changed_when: superrepo_update.stdout
  when: openstack_source.use_constraints and openstack_source.use_superproject and not openstack_source.use_local_superproject
