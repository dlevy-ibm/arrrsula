---
- name: find local copy if exists
  delegate_to: localhost
  become: false
  connection: local
  run_once: true
  stat: path=../openstack/.git
  register: has_local_openstack
  when: openstack_source.use_local_superproject

- name: make a tarball
  command: tar -cJf openstack.tar.xz -C .. openstack
  delegate_to: localhost
  become: false
  run_once: true
  connection: local
  when: openstack_source.use_local_superproject and has_local_openstack.stat.isdir

- name: copy it up
  copy: src=openstack.tar.xz dest=/srv/git
  when: openstack_source.use_local_superproject and has_local_openstack.stat.isdir

- name: explode tarball
  command: tar -xJf /srv/git/openstack.tar.xz -C /srv/git
  when: openstack_source.use_local_superproject and has_local_openstack.stat.isdir

- name: Use local copy of superrepo
  file: path=/opt/stack state=link src=/srv/git/openstack
  when: openstack_source.use_superproject and openstack_source.use_local_superproject

- name: get openstack superrepo
  git: repo="{{ openstack_source.git_mirror }}/openstack"
       dest="/opt/stack"
       version="{{ openstack_source.project_rev }}"
       update="{{ openstack_source.git_update }}"
       recursive=no
       force=yes
       depth="{{ openstack_source.depth | default(omit) }}"
  register: git_result
  until: git_result|success
  retries: 3
  when: openstack_source.use_superproject and not openstack_source.use_local_superproject

- name: modify the remote url of the submodules to point to local mirror
  redirect_to_local_mirror:
       local_mirror: "{{ openstack_source.git_mirror }}"
       git_dir: /opt/stack
  when: openstack_source.use_superproject and not openstack_source.use_local_superproject and
        ( openstack_source.git_mirror_is_local is defined and openstack_source.git_mirror_is_local )

- name: initialize repo submodules
  command: git submodule init
  args:
    chdir: /opt/stack
  register: superrepo_init
  changed_when: superrepo_init.stdout
  when: openstack_source.use_superproject and not openstack_source.use_local_superproject

- name: fetch all tags
  command: git fetch --tags
  args:
    chdir: /opt/stack
  register: superrepo_tags
  changed_when: superrepo_tags.stdout
  when: openstack_source.use_superproject and not openstack_source.use_local_superproject

- name: get requirements project from superrepo
  command: git submodule update --recursive requirements
  args:
    chdir: /opt/stack
  register: superrepo_update
  changed_when: superrepo_update.stdout
  when: openstack_source.use_constraints and openstack_source.use_superproject and not openstack_source.use_local_superproject
