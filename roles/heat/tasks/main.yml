---
- name: create heat user
  user: name=heat comment=heat shell=/bin/false system=yes home=/nonexistent
        createhome=no

- name: create heat environment.d directory
  file: dest=/etc/heat/environment.d state=directory

- name: create heat log directory
  file: dest=/var/log/heat state=directory mode=0755 owner=heat

- name: create heat cache dir
  file: dest=/var/cache/heat state=directory mode=0700
        owner=heat group=heat

- name: permit access to heat
  ufw: rule=allow to_port={{ item }} proto=tcp
  tags: ufw
  with_items:
    - "{{ endpoints.heat.port.haproxy_api }}"
    - "{{ endpoints.heat_cfn.port.haproxy_api }}"

- name: install heat services
  upstart_service: name={{ item }}
                   user=heat
                   cmd=/usr/local/bin/{{ item }}
                   config_files=/etc/heat/heat.conf
  with_items:
    - heat-api
    - heat-api-cfn
    - heat-engine

- name: heat config
  template: src=etc/heat/{{ item }} dest=/etc/heat/{{ item }} mode=0644
  with_items:
    - heat.conf
    - policy.json
    - api-paste.ini
  notify:
    - restart heat services

- name: create heat domain
  os_keystone_domain: cloud=admin
                      name="{{ heat.stack_user_domain_name }}"

#- name: create heat domain admin user
#  os_user: cloud=admin
#           name="{{ heat.domain_admin }}"
#           password="{{ secrets.stack_domain_admin_password }}"
#           domain="{{ heat.stack_user_domain_name }}"

# Workaround until Ursula uses Ansible 2.x

- name: create heat domain admin user
  command: openstack --os-cloud admin user create --domain {{ heat.stack_user_domain_name }} --password {{ secrets.stack_domain_admin_password }} {{ heat.domain_admin }}
  failed_when: False

- name: add admin role to the heat domain admin user
  command: openstack --os-cloud admin role add --domain "{{ heat.stack_user_domain_name }}" --user "{{ heat.domain_admin }}" admin
  failed_when: False

- name: create heat stack owner role
  os_keystone_role: cloud=admin
                    name="{{ heat.stack_owner }}"

- name: create heat stack user role
  os_keystone_role: cloud=admin
                    name="{{ heat.stack_user }}"

- name: stop heat services before db sync
  service: name={{ item }} state=stopped
  when: database_create.changed or force_sync|default('false')|bool
  with_items:
    - heat-api
    - heat-api-cfn
    - heat-engine
  tags: db-migrate

- name: sync heat database
  command: heat-manage db_sync
  when: database_create.changed or force_sync|default('false')|bool
  run_once: true
  changed_when: true
  notify:
    - restart heat services
  # we want this to always be changed so that it can notify the service restart
  tags: db-migrate

- meta: flush_handlers

- name: start heat services
  service: name={{ item }} state=started
  with_items:
    - heat-api
    - heat-api-cfn
    - heat-engine

- include: monitoring.yml tags=monitoring,common
  when: monitoring.enabled|default('True')|bool

- include: logging.yml
  tags:
    - logrotate
    - logging
  when: logging.enabled|default('True')|bool
