# {{ ansible_managed }}

[DEFAULT]
# Terminate after detecting deprecated options
fatal_deprecations = {{ cinder.enable_fatal_deprecations }}

# Paths to important items
state_path = {{ cinder.state_path }}

# APIs
osapi_volume_listen_port = {{ endpoints.cinder.port.backend_api }}
{% if not ceph.enabled|bool -%}
use_forwarded_for = true
{% endif %}

# Workers
osapi_volume_workers = {{ cinder.api_workers }}

# Logging
log_dir = /var/log/cinder
debug = {{ cinder.logging.debug }}

# Glance API
glance_api_servers = {{ endpoints.main }}:{{ endpoints.glance.port.backend_api }}
glance_api_version = 2

# Networking
my_ip = {{ hostvars[inventory_hostname][primary_interface]['ipv4']['address'] }}

# Volume options
{% if cinder.volume_clear is defined %}
volume_clear = {{ cinder.volume_clear }}
{% endif -%}

{% if cinder.volume_clear_size is defined %}
volume_clear_size = {{ cinder.volume_clear_size }}
{% endif -%}

{% if cinder.volume_group is defined %}
volume_group = {{ cinder.volume_group }}
{% endif %}

{% if cinder.enabled_backends|length %}
# Enabled backends
enabled_backends = {{ cinder.enabled_backends|join(',') }}
{% endif -%}

{% if cinder.default_backend != None %}
# Default backend
default_backend = {{ cinder.default_backend }}
{% endif %}

{% if swift.enabled|bool %}
backup_swift_url = http://{{ endpoints.swift.haproxy_vip }}:{{ endpoints.swift.port.cinder_backup }}/v1/
{% endif %}

{% for backend in cinder.backends %}
# Backends
[{{ backend.name }}]
volume_backend_name = {{ backend.name }}
volume_driver = {{ backend.volume_driver }}

{% if backend.name == "rbd_volumes" %}
rbd_pool = {{ ceph.pool_name }}
rbd_user = {{ ceph.cinder.rbd_user }}
rbd_secret_uuid = {{ cinder_uuid_file.content | b64decode }}
rbd_ceph_conf = {{ ceph.cinder.rbd_ceph_conf }}
rbd_flatten_volume_from_snapshot = {{ ceph.cinder.rbd_flatten_volume_from_snapshot }}
rbd_max_clone_depth = {{ ceph.cinder.rbd_max_clone_depth }}
{% endif %}

{% if backend.san_ip is defined %}
san_ip = {{ backend.san_ip }}
san_login = {{ backend.san_login }}
san_password = {{ backend.san_password }}
{% if backend.nimble_subnet_label is defined %}
nimble_subnet_label = {{ backend.nimble_subnet_label }}
{% endif -%}
{% endif %}

{% endfor -%}

[database]
connection = mysql+pymysql://cinder:{{ secrets.db_password }}@{{ endpoints.db }}/cinder?charset=utf8

[keystone_authtoken]
auth_url = {{ endpoints.keystone.url.admin }}
auth_uri = {{ endpoints.keystone.url.internal }}
cafile = {{ cinder.cafile }}
signing_dir = /var/cache/cinder/api
memcached_servers = {{ hostvars|ursula_memcache_hosts(groups, memcached.port) }}
auth_type = password
project_domain_id = default
project_name = service
user_domain_id = default
username = cinder
password = {{ secrets.service_password }}

[oslo_concurrency]
lock_path = {{ cinder.state_path }}/lock

[oslo_messaging_notifications]
driver = noop

[oslo_messaging_rabbit]
{% macro rabbitmq_hosts() -%}
{% for host in groups['controller'] -%}
   {% if loop.last -%}
{{ hostvars[host][hostvars[host]['primary_interface']]['ipv4']['address'] }}:{{ rabbitmq.port }}
   {%- else -%}
{{ hostvars[host][hostvars[host]['primary_interface']]['ipv4']['address'] }}:{{ rabbitmq.port }},
   {%- endif -%}
{% endfor -%}
{% endmacro -%}

heartbeat_timeout_threshold = {{ cinder.heartbeat_timeout_threshold }}
{% if rabbitmq.cluster -%}
rabbit_hosts = {{ rabbitmq_hosts() }}
{% else -%}
rabbit_host = {{ endpoints.rabbit }}
{% endif -%}
rabbit_userid = {{ rabbitmq.user }}
rabbit_password = {{ secrets.rabbit_password }}
