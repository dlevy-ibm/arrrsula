---
- name: discover keystone setup status
  command: mysql --batch --silent keystone -e "select type from service where type = 'compute'"
  failed_when: false
  register: keystone_setup

- name: set keystone_configured fact
  set_fact: keystone_configured=True
  when: keystone_setup.stdout|search("compute")

- name: generate admin_token
  set_fact: admin_token="{{ 'asdf' * 9|random(start=2) }}"
            insert_token=True

- name: add admin_token to keystone conf
  lineinfile: dest=/etc/keystone/keystone.conf
              line="admin_token = {{ admin_token }}"
              regexp="^admin_token"
              insertafter='\[DEFAULT\]'
              state=present

- name: add admin_token_auth to keystone pipeline
  template: dest=/etc/keystone/keystone-paste.ini
            src='{{ role_path }}/../keystone/templates/etc/keystone/keystone-paste.ini'

- name: restart keystone api
  service: name=keystone state=restarted
  when: keystone.deploy_method != "uwsgi"

- name: restart uwsgi
  service: name=uwsgi-emperor state=restarted
  when: keystone.deploy_method == "uwsgi"

- name: keystone bootstrap user
  command: keystone-manage bootstrap
  environment:
    OS_BOOTSTRAP_USERNAME: keystone.bootstrap.user
    OS_BOOTSTRAP_PASSWORD: keystone.bootstrap.password
    OS_BOOTSTRAP_PROJECT_NAME: keystone.bootstrap.project
    OS_BOOSTRAP_ROLE_NAME: keystone.bootstrap.role

- name: keystone tenants
  keystone_user: tenant={{ item }}
                 tenant_description="{{ item }} tenant"
                 token={{ admin_token }}
                 endpoint="http://127.0.0.1:{{ endpoints.keystone_admin.port.backend_api }}/{{ endpoints.keystone.version }}/"
  with_items: keystone.tenants

- name: keystone users
  keystone_user: user={{ item.name }}
                 password={{ item.password }}
                 tenant={{ item.tenant }}
                 token={{ admin_token }}
                 endpoint="http://127.0.0.1:{{ endpoints.keystone_admin.port.backend_api }}/{{ endpoints.keystone.version }}/"
  with_items: keystone.users

- name: keystone roles
  keystone_user: role={{ item.role }}
                 user={{ item.user }}
                 tenant={{ item.tenant }}
                 token={{ admin_token }}
                 endpoint="http://127.0.0.1:{{ endpoints.keystone_admin.port.backend_api }}/{{ endpoints.keystone.version }}/"
  with_items: keystone.user_roles

- name: heat stack user
  keystone_user: user=heat_stack_user
                 password="{{ secrets.service_password }}"
                 tenant=admin
                 token="{{ admin_token }}"
                 endpoint="http://127.0.0.1:{{ endpoints.keystone_admin.port.backend_api }}/{{ endpoints.keystone.version }}/"
  when: heat.enabled|bool

- name: heat stack user role
  keystone_user: role=heat_stack_user
                 user=heat_stack_user
                 tenant=admin
                 token="{{ admin_token }}"
                 endpoint="http://127.0.0.1:{{ endpoints.keystone_admin.port.backend_api }}/{{ endpoints.keystone.version }}/"
  when: heat.enabled|bool

- name: keystone endpoint
  keystone_service: name={{ item.name }}
                    type={{ item.type }}
                    description='{{ item.description }}'
                    public_url={{ item.public_url }}
                    internal_url={{ item.internal_url }}
                    admin_url={{ item.admin_url }}
                    region=RegionOne
                    token={{ admin_token }}
  # TODO refactor keystone.services data to be easier to pull out individual services
  with_items: keystone.services
  when: endpoints[item.name] is defined and item.name == 'keystone'

- name: remove admin_token from keystone api
  lineinfile: dest=/etc/keystone/keystone.conf
              line="admin_token = {{ admin_token }}"
              state=absent

- name: set insert_token to false
  set_fact: insert_token=False

- name: remove admin_token_auth from keystone pipeline
  template: dest=/etc/keystone/keystone-paste.ini
            src='{{ role_path }}/../keystone/templates/etc/keystone/keystone-paste.ini'

- name: restart keystone api
  service: name=keystone state=restarted
  when: keystone.deploy_method != "uwsgi"

- name: restart uwsgi
  service: name=uwsgi-emperor state=restarted
  when: keystone.deploy_method == "uwsgi"
